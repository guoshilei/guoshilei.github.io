[{"title":"IE6兼容及hack使用","date":"2014-10-31T09:27:56.000Z","path":"2014/10/31/jianjie/","text":"一、HACK我们真正的网页是由一份html和css来完成，在不同用户电脑上可能不一样的渲染效果。但是我们需要所有浏览器渲染效果都是一致的，由于存在兼容问题，对于一些特殊的html和css，要根据浏览器的不同，写不同的代码，显示效果是一样的，这个技术就叫做HACK（Hacker黑客）。 hack：针对不同的浏览器写不同的html和css，达到显示一致的效果。分类：html hack，css hack。 1、html的hack根据不同的浏览器写不同的html代码。需要用到一个辅助的代码，叫做hack符号。IE浏览器存在很多兼容问题，IE给我们留了一个接口，规定的IE版本的浏览器认识里面是html结构，其他的浏览器认为里面的是注释。 &lt;!--[if lte IE 9]&gt; 这是一段文字 &lt;![endif]--&gt; 这段代码里面的文字，只能在IE9及以下的版本浏览器内看得到。其他的不显示，认为是注释。 if：如果 lte：小于等于 IE 浏览器 9版本。 lte：less than or equal ，小于等于 lt：less than ，小于 gt：greater than ，大于 gte： greater than or equal ，大于等于 如果低于IE8就显示，其他的认为是注释。 &lt;!--[if lt IE 8]&gt; &lt;h1&gt;这是一个标题&lt;/h1&gt; &lt;![endif]--&gt; 如果高于IE8就显示，其他的认为是注释。 &lt;!--[if gt IE 8]&gt; &lt;h2&gt;大于IE8能看见&lt;/h2&gt; &lt;![endif]--&gt; 如果只有IE8认识，其他都是注释。 &lt;!--[if IE 8]&gt; &lt;p&gt;只有IE8认识&lt;/p&gt; &lt;![endif]--&gt; 作为浏览器版本提醒： 有一些代码在IE中加载，其他浏览器不加载。 位置不能乱写：不能卸载css样式里面 &lt;style&gt; .box{ width: 100px; height: 100px; border-radius: 50%; background: skyblue; } &lt;!--[if IE 6]&gt; &lt;script src=&quot;js/ie6.js&quot;&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;/style&gt; 2、css的hack针对不同的浏览器写不同的css样式。 css hack：值的hack、选择器的hack 2.1 值的hack 对某一个特定的属性值写hack。/IE6/hack符：_下划线、-横线。 .box{ width: 100px; height: 100px; background: skyblue; _background: gold;//表示只有IE6认识 } 其他浏览器会认为是未知的属性名：unknown property name。 /IE6、7/ hack符：~ ! @ # $ % ^ &amp; * ( ) + ` [ ] | &lt; &gt; ? / .任意一个符号都可以，表示只有ie6/7认识，其他的都是不认识。 !background: green; |background: green; +background: green; [background: green; /IE8/hack符：在属性值的后面加\\0/。 .selector { color: blue\\0/; } 只有IE8里加载这个属性。 background: red\\0/; /IE8/9/hack符：在属性值后面加\\0. /*IE6/7/8/9/10*/ hack符：在属性值后面加\\9 background: red\\9; 实际工作：记住IE6的下划线。IE6/7记住一个！。 2.2 选择器hack 针对不同的浏览器，加载不同选择器内的所有样式。 / IE 6 and below /  html .selector {}只有IE6及以下的浏览器认识这个选择器。高级浏览器认为html就是整个结构的根元素，不包含在*通配符选择器内，所以不认识这个选择器。而IE6及以下是认识。 .box{ width: 100px; height: 100px; background: skyblue; } * html .box{ width: 200px; height: 200px; background: pink; } 等价于：内部的属性值都加hack符。 _width: 200px; _height: 200px; _background: pink; / IE 7 and below / .selector, {}IE7及以下才认识的选择器写法。 .box,{ width: 200px; height: 200px; background: green; } 等价于： .box{ !width: 200px; !height: 200px; !background: green; } / Everything but IE 6 / html &gt; body .selector {}表示出了IE6其他的浏览器都认识。IE6不支持&gt;表示的子级选择器。 html&gt;body .box{ width: 200px; height: 200px; background: purple; } / Everything but IE 6/7 / html &gt; /**/ body .selector {} head ~ / / body .selector {} 除了IE6/7，其他的都认识。实际：选择器的hack不常用，不会把所有的属性都重写，单一的属性单独设置，直接用值hack。 二、IE6兼容问题 1、盒模型 1.1 DTD 如果页面没有写文档DTD，页面盒子在加载时其他高级浏览器正常加载，IE6加载模式是一种怪异模式。 正常：宽高确定后，添加内边距、border盒子整体外扩。 怪异：宽高确定后，添加内边距、border盒子会往内自减，实际书写内容区域变小。 解决方法：写DTD。 1.2盒子高度不能低于字号 IE6有默认字号是18px。其他浏览器都能够设置盒子高度低于默认字号的盒子。IE6不能让盒子高度低于18px。 解决方法：给你要设置高度的盒子单独设置一个字号属性，属性值小于你要设置的盒子高度。 _font-size: 0;只有IE6加载这个属性。 1.3 图片边框问题 图片外如果包裹了一个a标签，在IE6里会比正常情况给图片多加了一个蓝色的边框。 解决方法：给img都清除边框。 img{ border: none; } 2、浮动 2.1 一个浮动一个不浮动 高级浏览器：不浮动的元素会钻到浮动元素下面。 IE6：排在浮动元素后面。不会出现压盖效果。 解决方法：不要用浮动制作压盖，同级元素一个浮动另外一个也要浮动。 2.2 3像素bug 如果元素一个浮动，一个不浮动，IE6里会并排排列，同时两个元素之间多了3像素间距。 解决方法： ①同级元素一个浮动另外一个也要浮动。②给浮动的元素添加一个margin-right值为-3px的属性。 .box1{ width: 100px; height: 100px; background: #f40; float: left; margin-right: -3px; } 2.3 双倍margin问题 如果浮动的方向和margin边距的方向相同，那么首个浮动的元素距离父盒子的边距是margin值的两倍。 解决方法： ①浮动的方向与margin的方向相反，父盒子和第一个元素的间距用父盒子的padding挤出来。不要用儿子踹父亲。 ul{ list-style: none; width: 780px; padding-right: 20px; height: 40px; border: 1px solid #000; margin: 100px auto; } ul li{ float: right; width: 100px; height: 40px; background: #f40; margin-left: 20px; } ②非要用margin去撑开。单独给IE6的第一个盒子设置一个margin值减半。 ul li.half_margin{ _margin-right: 10px; } 2.4 overflow:hidden失效 加了overflow属性之后，盒子可以清除内部的浮动，自适应高度。IE6以前不能使用它来清浮动的效果。布局：layout。 IE有两个加载机制：有布局、没有布局。 有布局：hasLayout，盒子在布局时，根据内部元素的内容来进行布局。 没有布局：盒子在布局时，盒模型数据是来源于父元素。我们需要想办法触发有布局机制。有很多属性都能触发。有一个属性始终能够触发zoom放大属性。属性值：数字，1表示按1倍放大，2表示按2倍放大…… .box{ width: 700px; border: 10px solid #999; margin-bottom: 20px; overflow: hidden; _zoom: 1; } 三、图片和透明 1、图片 网页使用的三种图片：JPG、png、GIF。分辨率：72像素/英寸 1.1 JPG图片 是我们最常用的一种图片格式。 特点：色彩丰富。可以压缩，品质可以调整。 缺点：不能保存图层，不能做动图，不能保存背景透明、图片半透明的效果。 用途：有实际意义的结构，用作插入图，背景不是透明的背景图，图片大小比较小。 1.2 png图片 特点：不可压缩，可以保存图层，可以保存透明和半透明。 缺点：文件太大。 大小并不是一定png就比JPG大。色彩很丰富，图层保存比较多的时候，肯定是png文件大。如果保存的图片背景透明，文件色彩、形状都比较简单，png图片导出成没有图层的时候，文件反而比JPG要小。png图片保留一份带图层，往网上上传是需要将png图片导出一份图层合并之后。 用途：背景透明和半透明的图片，精灵图，图片比较小色彩不是很复杂。 1.3 GIF图片 GIF图片无所压缩不压缩的问题。色彩比较单一，色值有256种、128种、216种、64种……2种。 特点：文件小，可以存动图，能够保存透明，不能保存半透明。 动图：通过添加时间轴帧动画，每一帧都有一张图片，连续按照一定的时间间隔播放，有一个动图的效果。背景透明：同一个图片，png比GIF文件要大。 用途：动图，完全透明的背景图片（解决pngIE6背景透明的兼容问题）。 2、盒子透明 需要用一个属性完成，透明度属性opacity，属性值是0到1之间的小数。 opacity: 0.5;透明效果：盒子本身半透明，内部的元素也跟着透明。 IE8及以下的浏览器不支持opacity属性。虽然不支持，IE有自己的设置盒子透明的属性，滤镜属性filter。http://justcoding.iteye.com/blog/940184/比较强大。内部有多重滤镜属性，其中包括alpha通道透明。 透明度的数值注意：0~100之间的整数。 filter: alpha(opacity=50); 解决内容同时透明的问题：只让盒子透明，内容不透明。将文字单独拿出来放在别的盒子里，用定位定到半透明幕布上面。 3、图片透明 除了IE6，其他浏览器都能够正常的加载背景透明或半透明效果的PNG图片。ie6不支持。 解决IE6的png图片兼容问题： 方法一：如果只有透明，没有半透明，可以用GIF图片格式代替，GIF在IE6里没有兼容问题。 方法二：给我们页面添加一段只有IE6认识的js代码，解决png背景透明问题。 &lt;!--[if IE 6]&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/png.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; DD_belatedPNG.fix(&quot;选择器&quot;);//多个选择器，用逗号隔开 &lt;/script&gt; &lt;![endif]--&gt;","tags":[{"name":"简介","slug":"简介","permalink":"http://yoursite.com/tags/简介/"}]},{"title":"IE6兼容及hack使用","date":"2014-10-31T09:27:56.000Z","path":"2014/10/31/title3/","text":"一、HACK我们真正的网页是由一份html和css来完成，在不同用户电脑上可能不一样的渲染效果。但是我们需要所有浏览器渲染效果都是一致的，由于存在兼容问题，对于一些特殊的html和css，要根据浏览器的不同，写不同的代码，显示效果是一样的，这个技术就叫做HACK（Hacker黑客）。 hack：针对不同的浏览器写不同的html和css，达到显示一致的效果。分类：html hack，css hack。 1、html的hack根据不同的浏览器写不同的html代码。需要用到一个辅助的代码，叫做hack符号。IE浏览器存在很多兼容问题，IE给我们留了一个接口，规定的IE版本的浏览器认识里面是html结构，其他的浏览器认为里面的是注释。 &lt;!--[if lte IE 9]&gt; 这是一段文字 &lt;![endif]--&gt; 这段代码里面的文字，只能在IE9及以下的版本浏览器内看得到。其他的不显示，认为是注释。 if：如果 lte：小于等于 IE 浏览器 9版本。 lte：less than or equal ，小于等于 lt：less than ，小于 gt：greater than ，大于 gte： greater than or equal ，大于等于 如果低于IE8就显示，其他的认为是注释。 &lt;!--[if lt IE 8]&gt; &lt;h1&gt;这是一个标题&lt;/h1&gt; &lt;![endif]--&gt; 如果高于IE8就显示，其他的认为是注释。 &lt;!--[if gt IE 8]&gt; &lt;h2&gt;大于IE8能看见&lt;/h2&gt; &lt;![endif]--&gt; 如果只有IE8认识，其他都是注释。 &lt;!--[if IE 8]&gt; &lt;p&gt;只有IE8认识&lt;/p&gt; &lt;![endif]--&gt; 作为浏览器版本提醒： 有一些代码在IE中加载，其他浏览器不加载。 位置不能乱写：不能卸载css样式里面 &lt;style&gt; .box{ width: 100px; height: 100px; border-radius: 50%; background: skyblue; } &lt;!--[if IE 6]&gt; &lt;script src=&quot;js/ie6.js&quot;&gt;&lt;/script&gt; &lt;![endif]--&gt; &lt;/style&gt; 2、css的hack针对不同的浏览器写不同的css样式。 css hack：值的hack、选择器的hack 2.1 值的hack 对某一个特定的属性值写hack。/IE6/hack符：_下划线、-横线。 .box{ width: 100px; height: 100px; background: skyblue; _background: gold;//表示只有IE6认识 } 其他浏览器会认为是未知的属性名：unknown property name。 /IE6、7/ hack符：~ ! @ # $ % ^ &amp; * ( ) + ` [ ] | &lt; &gt; ? / .任意一个符号都可以，表示只有ie6/7认识，其他的都是不认识。 !background: green; |background: green; +background: green; [background: green; /IE8/hack符：在属性值的后面加\\0/。 .selector { color: blue\\0/; } 只有IE8里加载这个属性。 background: red\\0/; /IE8/9/hack符：在属性值后面加\\0. /*IE6/7/8/9/10*/ hack符：在属性值后面加\\9 background: red\\9; 实际工作：记住IE6的下划线。IE6/7记住一个！。 2.2 选择器hack 针对不同的浏览器，加载不同选择器内的所有样式。 / IE 6 and below /  html .selector {}只有IE6及以下的浏览器认识这个选择器。高级浏览器认为html就是整个结构的根元素，不包含在*通配符选择器内，所以不认识这个选择器。而IE6及以下是认识。 .box{ width: 100px; height: 100px; background: skyblue; } * html .box{ width: 200px; height: 200px; background: pink; } 等价于：内部的属性值都加hack符。 _width: 200px; _height: 200px; _background: pink; / IE 7 and below / .selector, {}IE7及以下才认识的选择器写法。 .box,{ width: 200px; height: 200px; background: green; } 等价于： .box{ !width: 200px; !height: 200px; !background: green; } / Everything but IE 6 / html &gt; body .selector {}表示出了IE6其他的浏览器都认识。IE6不支持&gt;表示的子级选择器。 html&gt;body .box{ width: 200px; height: 200px; background: purple; } / Everything but IE 6/7 / html &gt; /**/ body .selector {} head ~ / / body .selector {} 除了IE6/7，其他的都认识。实际：选择器的hack不常用，不会把所有的属性都重写，单一的属性单独设置，直接用值hack。 二、IE6兼容问题 1、盒模型 1.1 DTD 如果页面没有写文档DTD，页面盒子在加载时其他高级浏览器正常加载，IE6加载模式是一种怪异模式。 正常：宽高确定后，添加内边距、border盒子整体外扩。 怪异：宽高确定后，添加内边距、border盒子会往内自减，实际书写内容区域变小。 解决方法：写DTD。 1.2盒子高度不能低于字号 IE6有默认字号是18px。其他浏览器都能够设置盒子高度低于默认字号的盒子。IE6不能让盒子高度低于18px。 解决方法：给你要设置高度的盒子单独设置一个字号属性，属性值小于你要设置的盒子高度。 _font-size: 0;只有IE6加载这个属性。 1.3 图片边框问题 图片外如果包裹了一个a标签，在IE6里会比正常情况给图片多加了一个蓝色的边框。 解决方法：给img都清除边框。 img{ border: none; } 2、浮动 2.1 一个浮动一个不浮动 高级浏览器：不浮动的元素会钻到浮动元素下面。 IE6：排在浮动元素后面。不会出现压盖效果。 解决方法：不要用浮动制作压盖，同级元素一个浮动另外一个也要浮动。 2.2 3像素bug 如果元素一个浮动，一个不浮动，IE6里会并排排列，同时两个元素之间多了3像素间距。 解决方法： ①同级元素一个浮动另外一个也要浮动。②给浮动的元素添加一个margin-right值为-3px的属性。 .box1{ width: 100px; height: 100px; background: #f40; float: left; margin-right: -3px; } 2.3 双倍margin问题 如果浮动的方向和margin边距的方向相同，那么首个浮动的元素距离父盒子的边距是margin值的两倍。 解决方法： ①浮动的方向与margin的方向相反，父盒子和第一个元素的间距用父盒子的padding挤出来。不要用儿子踹父亲。 ul{ list-style: none; width: 780px; padding-right: 20px; height: 40px; border: 1px solid #000; margin: 100px auto; } ul li{ float: right; width: 100px; height: 40px; background: #f40; margin-left: 20px; } ②非要用margin去撑开。单独给IE6的第一个盒子设置一个margin值减半。 ul li.half_margin{ _margin-right: 10px; } 2.4 overflow:hidden失效 加了overflow属性之后，盒子可以清除内部的浮动，自适应高度。IE6以前不能使用它来清浮动的效果。布局：layout。 IE有两个加载机制：有布局、没有布局。 有布局：hasLayout，盒子在布局时，根据内部元素的内容来进行布局。 没有布局：盒子在布局时，盒模型数据是来源于父元素。我们需要想办法触发有布局机制。有很多属性都能触发。有一个属性始终能够触发zoom放大属性。属性值：数字，1表示按1倍放大，2表示按2倍放大…… .box{ width: 700px; border: 10px solid #999; margin-bottom: 20px; overflow: hidden; _zoom: 1; } 三、图片和透明 1、图片 网页使用的三种图片：JPG、png、GIF。分辨率：72像素/英寸 1.1 JPG图片 是我们最常用的一种图片格式。 特点：色彩丰富。可以压缩，品质可以调整。 缺点：不能保存图层，不能做动图，不能保存背景透明、图片半透明的效果。 用途：有实际意义的结构，用作插入图，背景不是透明的背景图，图片大小比较小。 1.2 png图片 特点：不可压缩，可以保存图层，可以保存透明和半透明。 缺点：文件太大。 大小并不是一定png就比JPG大。色彩很丰富，图层保存比较多的时候，肯定是png文件大。如果保存的图片背景透明，文件色彩、形状都比较简单，png图片导出成没有图层的时候，文件反而比JPG要小。png图片保留一份带图层，往网上上传是需要将png图片导出一份图层合并之后。 用途：背景透明和半透明的图片，精灵图，图片比较小色彩不是很复杂。 1.3 GIF图片 GIF图片无所压缩不压缩的问题。色彩比较单一，色值有256种、128种、216种、64种……2种。 特点：文件小，可以存动图，能够保存透明，不能保存半透明。 动图：通过添加时间轴帧动画，每一帧都有一张图片，连续按照一定的时间间隔播放，有一个动图的效果。背景透明：同一个图片，png比GIF文件要大。 用途：动图，完全透明的背景图片（解决pngIE6背景透明的兼容问题）。 2、盒子透明 需要用一个属性完成，透明度属性opacity，属性值是0到1之间的小数。 opacity: 0.5;透明效果：盒子本身半透明，内部的元素也跟着透明。 IE8及以下的浏览器不支持opacity属性。虽然不支持，IE有自己的设置盒子透明的属性，滤镜属性filter。http://justcoding.iteye.com/blog/940184/比较强大。内部有多重滤镜属性，其中包括alpha通道透明。 透明度的数值注意：0~100之间的整数。 filter: alpha(opacity=50); 解决内容同时透明的问题：只让盒子透明，内容不透明。将文字单独拿出来放在别的盒子里，用定位定到半透明幕布上面。 3、图片透明 除了IE6，其他浏览器都能够正常的加载背景透明或半透明效果的PNG图片。ie6不支持。 解决IE6的png图片兼容问题： 方法一：如果只有透明，没有半透明，可以用GIF图片格式代替，GIF在IE6里没有兼容问题。 方法二：给我们页面添加一段只有IE6认识的js代码，解决png背景透明问题。 &lt;!--[if IE 6]&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/png.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; DD_belatedPNG.fix(&quot;选择器&quot;);//多个选择器，用逗号隔开 &lt;/script&gt; &lt;![endif]--&gt;","tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"CSS-background背景","date":"2014-10-16T09:27:56.000Z","path":"2014/10/16/title1/","text":"background是一个复合属性。 1、background-color背景色渲染位置：border及以内。属性值：十六进制、rgb、rgba、颜色名。 background-color: blue; 2、background-image背景图实际渲染位置：跟背景色一样，能看到的其实就是border以内。属性值：url(图片路径)。 background-image: url(images/hai.jpg); 添加的背景图片会铺满整个盒子的背景区域。 url：uniform resource locator。统一资源定位符。实际就是背景图片的来源。url内部的值：图片的路径，可以是相对路径，也可以是绝对路径。 背景图和背景色的压盖顺序：image压盖color。 3、background-repeat背景重复设置背景图片以什么方式进行重复。属性值：repeat 默认值，整个背景区域重复no-repeat 不重复repeat-x 水平方向重复repeat-y 垂直方向重复 background-repeat: repeat; background-repeat: no-repeat; background-repeat: repeat-x; background-repeat: repeat-y;` body背景加载效果： repeat-x的一个妙用：制作一个渐变背景的导航栏。给盒子添加一个背景图：水平方向1像素宽，垂直方向就是正常高度，让背景图，水平重复铺开。 background-image: url(images/nav_bg.png); background-repeat: repeat-x; background-position背景图位置 作用：规定我们插入的背景图的在盒子里的位置。属性值：像素表示法、单词表示法、百分比表示法。 ①像素表示法属性值有两个，都用像素表示： background-position: 150px 100px; 第一个属性值：背景图片左上角距离盒子背景区域左上角（border以内）的水平偏移量。 第二个属性值：背景图片左上角距离盒子背景区域左上角（border以内）的垂直偏移量。 位置的属性值分正负。正方向：向右向下移动；负方向：向左向上移动。指的是图片针对（0,0）点移动的方向。 css精灵图技术：很多元素都有背景图，需要有实际存在图片，就需要发送多个http请求下载图片。将很多小的背景图合成在一张图片上，谁用背景图加载的都是一张图片。用法：给一个合适盒子大小，通过背景图定位找到图片的位置。 ②单词表示法 图片位置水平和垂直方向用代表方向的单词来表示 水平方向，第一个属性值：left ，center，right。背景在盒子内部居左、居中、居右。 垂直方向，第二个属性值：top，center，bottom。背景图在盒子内部居上、居中、居下。 background-position: center center; body大背景效果：水平居中、垂直居上。 background-position: center top; 制作通栏ｂａｎｎｅｒ。 ③百分比表示法 关注：百分比参考依据。 background-position: 100% 50%; background-attachment背景附着 指的是背景是否随着页面滚动而滚动。 属性值：scroll 滚动，背景图会随着页面滚动走。 fixed 固定，背景图不会随着页面滚动而滚走。 background-attachment: fixed; background复合属性background: #f00 fixed url(images/bg4.jpg) no-repeat center top; 五个属性之间位置可以更换，position的两个属性值位置不能电脑。 #二、背景实际应用# 1、padding挤出背景图效果方法：给盒子用padding-left留出一个空白区域，添加一个合适的背景图，不重复。 padding-top: 96px; background: url(images/in_12.png) no-repeat center top; 2、文字换图片提高搜索引擎优化：搜索时都是搜索文字。 h1标签内部放的是logo的图片。用一个技巧，logo图不用插入图，换成背景图，内部放置的是简单的关键字。 h1 a{ display: block; height: 96px; background: url(images/in_15.png); 添加背景图，用户看到 text-indent: -9999px; 隐藏文字 overflow: hidden; }","tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"CSS中定位的使用","date":"2014-10-16T09:27:56.000Z","path":"2014/10/16/title2/","text":"1、相对定位定位：元素位置相对于某一个参考物进行的位置的偏移。 相对定位：元素相对于自身进行的位置偏移。position：定位属性。属性值：relative。相对的。 偏移的数据量。有其他属性来控制，方向属性，left、right、top、bottom。 position: relative; left: 100px; top: 110px; 便宜方向判断：如果属性值为正，偏移方向与属性方向相反。 left: 100px; 向右100 top: 110px; 向下110 right: 20px; 向左20 bottom: 20px; 向上20 等价于：属性值为负值，便宜方向与属性方向相同。 right: -100px; 向右100 bottom: -110px; 向下110 综合：水平方向和垂直方向可以任选一个属性，进行搭配。 .box{ left: 100px; //以元素自身左上角顶点为参考点，向右向下移动 top: 110px; } left: 100px; bottom: 110px; //以元素自身的左下顶点为参考点，向右上移动。 right: 50px; bottom: 110px; //以元素自身的右下顶点为参考点，向左上移动。 right: 50px; top: 110px; //以元素自身的右上顶点为参考点，向左下移动。 特点：显示的位置是偏移后的位置，原位置还保留，没有被其他元素给占有，形影分离。相对定位不会让元素脱离标准流，标准流的位置还是他自己的。用途不是很多，也有自己的特殊用途。 ①结构比较稳固，经常拿来做绝对定位的参考元素，子绝父相。②微调。 div span{ font-size: 12px; position: relative; bottom: 6px; } 2、绝对定位绝对定位的定位参考元素不固定的，但是不是本身。属性值：absolute。绝对的。也有四个方向的偏移量：left、right、top、bottom。 position: absolute; top: 100px; left: 150px; 特点：与相对定位比较，元素绝对定位之后，脱离标准流，标准流的位置让给了后面的元素。绝对定位的元素根据选取偏移方向不同，参考点也不同。 ①参考元素为body时的定位参考点 有top参与的绝对定位，定位的参考点是页面（body）的左上角和右上角 position: absolute; top: 200px; right: 300px; 有bottom参与的绝对定位：参考点是页面（body）首屏的左下角和右下角。 position: absolute; bottom: 200px; left: 300px; ②祖先元素作为参考元素 如果祖先元素中有定位的元素，元素绝对定位的参考元素就是距离它最近的有定位的祖先元素。 &lt;div class=&quot;box1&quot;&gt; //有相对定位 &lt;div class=&quot;box2&quot;&gt; //有相对定位 &lt;div class=&quot;box3&quot;&gt;//没有定位 &lt;p&gt;&lt;/p&gt; //绝对定位，参考元素是box2 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;box1&quot;&gt; //有相对定位 &lt;div class=&quot;box2&quot;&gt; //有绝对定位 &lt;div class=&quot;box3&quot;&gt;//没有定位 &lt;p&gt;&lt;/p&gt; //绝对定位，参考元素是box2 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; 绝对定位元素的参考盒子，可以是相对定位，也可以是绝对定位，还可以是固定定位。 子绝父相：子元素是绝对定位，参考的祖先元素是相对定位。 子绝父绝：子元素是绝对定位，参考的祖先元素是绝对地位。 子绝父固：子元素是绝对定位，参考的祖先元素是固定地位。 只要祖先元素中有任何一种定位，距离该子元素最近，它就是定位参考元素。子绝父相方法最常用：相对定位的元素不脱离标准流，结构稳定，对于当参考物来说比较方便。 ③祖先元素参考时的参考点 会忽视我们祖先元素的padding区域，以border内部的四个顶点作为相应方向的参考。相应方向：与使用的定位偏移方向是一致。 position: absolute; bottom: 50px; left: 50px; ④制作压盖效果 用绝对定位制作压盖效果。 .box{ position: relative; width: 400px; height: 400px; border: 1px solid #000; padding: 20px; margin: 100px auto; } .demo1{ width: 400px; height: 400px; background: skyblue; } .demo2{ width: 100px; height: 30px; background: gold; position: absolute; left: 160px; bottom: 40px; } ⑤绝对定位元素的居中 不能使用标准流的方法，只能先左边线居中，自身拽回宽度一半。 .demo2{ width: 100px; height: 30px; background: gold; position: absolute; left: 50%; 移动父亲宽度的50% bottom: 40px; margin-left: -50px;将元素本身拽回自身宽度的一般 } 补充：鼠标显示小手状态cursor: pointer; 3、固定定位固定定位，参考我们的浏览器窗口进行定位。属性值：fixed。始终保持针对浏览器窗口某一个顶点位置相对不变。也有四个方向的偏移量的值：left、right、top、bottom。 position: fixed; bottom: 80px; right: 80px; 4、压盖顺序z-index默认压盖顺序： ①有定位的元素压盖没有定位的元素。②有定位的元素，不区分定位类型，只要html结构写在后面的压盖写在前面。 自定义压盖顺序 属性：z-index，压盖顺序。属性值：数字，没有任何单位，数值越大，压盖数值小的。 ①只能给定位的元素加，其他的标准流的或者浮动元素都没有z-index属性。默认的定位元素的z-index值是1. position: relative; left: 0; bottom: 300px; z-index: 2; ②属性值越大的会压盖属性值越小的。 ③如果属性值相同，看html结构书写顺序，后面的压盖前面的。 ④父子盒模型里，如果父子都有定位，都有自定义的z-index值，两对父子对比时，不管子元素的属性值多大，只要父亲z-index值小，都只能被压盖。子级再大，如果父级数值小，都不管用。 &lt;div class=&quot;box1&quot; //父亲一z-index是5 &lt;div class=&quot;small&quot;&gt;1&lt;/div&gt;//30 &lt;/div&gt; &lt;div class=&quot;box2&quot;&gt;//父亲二z-index是4 &lt;div class=&quot;big&quot;&gt;2&lt;/div&gt;//100 &lt;/div&gt;","tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]},{"title":"css中浮动的影响","date":"2014-10-11T09:27:56.000Z","path":"2014/10/11/title/","text":"1、浮动存在的问题浮动的元素不能撑高父级。元素脱离标准流之后， 不能再撑高它的父级盒子浮动会影响后面的浮动的元素。如果后面的浮动方向相同， 会去贴上一个浮动最后一个元素的边。 2、清楚浮动影响的方法 给父盒子加高度给父级元素增加高度， 它内部的浮动元素， 被限制了范围， 不会再影响后面的元素浮动。 效果： 解决父级高度的问题， 解决浮动影响后面的浮动的问题。 问题： 高度还是不能够自适应。 清除浮动属性 clear 元素都可以设置一个叫做 clear 的属性， 清除浮动的作用。 属性值： left、 right、 both。作用： clear 整体表示清除自身受到的其他元素带来的浮动的影响。left： 清除受到的左浮动影响。right： 清除受到的右浮动影响。both： 清除受到的左右两个方向的浮动影响。 box1{ clear: both;} ` 解决： 浮动的互相影响。` 问题： 父盒子还是不能被子盒子撑高。 margin 如果小于中间浮动的子元素的高度， 显示效果失效。隔墙法外墙法：在右浮动元素的父盒子之间隔一堵墙。 添加两个类， 一个是用来清除浮动， 一个用来模拟外边距。 cl{ clear: both; 清除浮动 } .h20{ height: 20px; 模拟间距 } 解决： 浮动互相影响。问题： 高度自适应， MARGIN 失效。 内墙法：将清除浮动的墙放在有浮动元素的父盒子内部的最后。 只要有浮动， 就在盒子内部加一堵墙。 解决： 浮动互相影响， 高度自适应， margin 失效。 缺点： ①html 结构布局， 很多需要进行浮动， 每个浮动的盒子内都需要隔一堵墙。 页面结构复杂会出现很多冗余的没有意义的标签。 ②一个盒子内的标签要浮动就都浮动， 浮动后面的墙是一个标准流里的元素overflow： hidden盒子内部的元素可以设置溢出模式， 隐藏， 自动显示。overflow： 溢出。 属性值： hidden 溢出隐藏， auto 溢出滚动（ 多出的内容出现滚动条）` { `overflow： hidden; overflow： auto;` } overflow 的其他小功能： 能够清除盒子内部元素的浮动影响 解决： 浮动互相影响， 高度自适应， margin 失效。 优势： 能够解决所有的问题， 不会增加无用的标签。 3、overflow： hidden； 的加载机制：高度自适应： 如果元素有溢出隐藏的属性， 网页加载时， 会强制的去元素内部搜索， 识别所有内部元素的高度， 会用最高的元素高度配给我们父盒子的自适应高度。 浮动影响： 加载时， 如果有溢出隐藏， 强制检索， 看盒子内部是否有浮动的元素， 如果有， 会被整体管理起来， 在自身的高度内， 不会影响其他的浮动元素。实际工作中： 就用 overflow 来清浮动","tags":[{"name":"css","slug":"css","permalink":"http://yoursite.com/tags/css/"}]}]